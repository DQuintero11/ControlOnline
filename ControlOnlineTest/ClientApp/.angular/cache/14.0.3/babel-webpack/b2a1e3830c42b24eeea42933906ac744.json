{"ast":null,"code":"import _defineProperty from \"C:/Users/danie/source/repos/ControlOnlineTest/ControlOnlineTest/ClientApp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from '@angular/core';\nimport { ElementRef, NgModuleRef, createComponent, Injector, inject, TemplateRef, ViewContainerRef, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\n\nfunction throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\n\n\nfunction throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\n\n\nfunction throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\n\n\nfunction throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\n\n\nfunction throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\n\n\nfunction throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\n\n\nclass Portal {\n  constructor() {\n    _defineProperty(this, \"_attachedHost\", void 0);\n  }\n\n  /** Attach this portal to a host. */\n  attach(host) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n\n    this._attachedHost = host;\n    return host.attach(this);\n  }\n  /** Detach this portal from its host */\n\n\n  detach() {\n    let host = this._attachedHost;\n\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n\n\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n\n\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\n\nclass ComponentPortal extends Portal {\n  /** The type of the component that will be instantiated for attachment. */\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n\n  /** Injector used for the instantiation of the component. */\n\n  /**\n   * @deprecated No longer in use. To be removed.\n   * @breaking-change 18.0.0\n   */\n\n  /**\n   * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\n   */\n  constructor(component, viewContainerRef, injector,\n  /**\n   * @deprecated No longer in use. To be removed.\n   * @breaking-change 18.0.0\n   */\n  _componentFactoryResolver, projectableNodes) {\n    super();\n\n    _defineProperty(this, \"component\", void 0);\n\n    _defineProperty(this, \"viewContainerRef\", void 0);\n\n    _defineProperty(this, \"injector\", void 0);\n\n    _defineProperty(this, \"componentFactoryResolver\", void 0);\n\n    _defineProperty(this, \"projectableNodes\", void 0);\n\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.projectableNodes = projectableNodes;\n  }\n\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\n\n\nclass TemplatePortal extends Portal {\n  constructor(\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef,\n  /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef,\n  /** Contextual data to be passed in to the embedded view. */\n  context,\n  /** The injector to use for the embedded view. */\n  injector) {\n    super();\n\n    _defineProperty(this, \"templateRef\", void 0);\n\n    _defineProperty(this, \"viewContainerRef\", void 0);\n\n    _defineProperty(this, \"context\", void 0);\n\n    _defineProperty(this, \"injector\", void 0);\n\n    this.templateRef = templateRef;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n    this.injector = injector;\n  }\n\n  get origin() {\n    return this.templateRef.elementRef;\n  }\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n\n\n  attach(host, context = this.context) {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  detach() {\n    this.context = undefined;\n    return super.detach();\n  }\n\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\n\n\nclass DomPortal extends Portal {\n  /** DOM node hosting the portal's content. */\n  constructor(element) {\n    super();\n\n    _defineProperty(this, \"element\", void 0);\n\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\n\n\nclass BasePortalOutlet {\n  constructor() {\n    _defineProperty(this, \"_attachedPortal\", void 0);\n\n    _defineProperty(this, \"_disposeFn\", void 0);\n\n    _defineProperty(this, \"_isDisposed\", false);\n\n    _defineProperty(this, \"attachDomPortal\", null);\n  }\n\n  /** Whether this host has an attached portal. */\n  hasAttached() {\n    return !!this._attachedPortal;\n  }\n  /** Attaches a portal. */\n\n\n  attach(portal) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal); // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  } // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n\n\n  /** Detaches a previously attached portal. */\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n  /** Permanently dispose of this portal host. */\n\n\n  dispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n\n    this._isDisposed = true;\n  }\n  /** @docs-private */\n\n\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n\n  _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n\n      this._disposeFn = null;\n    }\n  }\n\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nclass BasePortalHost extends BasePortalOutlet {}\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\n\n\nclass DomPortalOutlet extends BasePortalOutlet {\n  /**\n   * @param outletElement Element into which the content is projected.\n   * @param _unusedComponentFactoryResolver Used to resolve the component factory.\n   *   Only required when attaching component portals.\n   * @param _appRef Reference to the application. Only used in component portals when there\n   *   is no `ViewContainerRef` available.\n   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n   *   have one. Only used for component portals.\n   * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n   *   become a required parameter.\n   */\n  constructor(\n  /** Element into which the content is projected. */\n  outletElement,\n  /**\n   * @deprecated No longer in use. To be removed.\n   * @breaking-change 18.0.0\n   */\n  _unusedComponentFactoryResolver, _appRef, _defaultInjector,\n  /**\n   * @deprecated `_document` Parameter to be made required.\n   * @breaking-change 10.0.0\n   */\n  _document) {\n    super();\n\n    _defineProperty(this, \"outletElement\", void 0);\n\n    _defineProperty(this, \"_appRef\", void 0);\n\n    _defineProperty(this, \"_defaultInjector\", void 0);\n\n    _defineProperty(this, \"_document\", void 0);\n\n    _defineProperty(this, \"attachDomPortal\", portal => {\n      const element = portal.element;\n\n      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('DOM portal content must be attached to a parent node.');\n      } // Anchor used to save the element's previous position so\n      // that we can restore it when the portal is detached.\n\n\n      const anchorNode = this._document.createComment('dom-portal');\n\n      element.parentNode.insertBefore(anchorNode, element);\n      this.outletElement.appendChild(element);\n      this._attachedPortal = portal;\n      super.setDisposeFn(() => {\n        // We can't use `replaceWith` here because IE doesn't support it.\n        if (anchorNode.parentNode) {\n          anchorNode.parentNode.replaceChild(element, anchorNode);\n        }\n      });\n    });\n\n    this.outletElement = outletElement;\n    this._appRef = _appRef;\n    this._defaultInjector = _defaultInjector;\n    this._document = _document;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n\n\n  attachComponentPortal(portal) {\n    let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n\n    if (portal.viewContainerRef) {\n      const injector = portal.injector || portal.viewContainerRef.injector;\n      const ngModuleRef = injector.get(NgModuleRef, null, {\n        optional: true\n      }) || undefined;\n      componentRef = portal.viewContainerRef.createComponent(portal.component, {\n        index: portal.viewContainerRef.length,\n        injector,\n        ngModuleRef,\n        projectableNodes: portal.projectableNodes || undefined\n      });\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n      }\n\n      componentRef = createComponent(portal.component, {\n        elementInjector: portal.injector || this._defaultInjector || Injector.NULL,\n        environmentInjector: this._appRef.injector,\n        projectableNodes: portal.projectableNodes || undefined\n      });\n\n      this._appRef.attachView(componentRef.hostView);\n\n      this.setDisposeFn(() => {\n        // Verify that the ApplicationRef has registered views before trying to detach a host view.\n        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n        if (this._appRef.viewCount > 0) {\n          this._appRef.detachView(componentRef.hostView);\n        }\n\n        componentRef.destroy();\n      });\n    } // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n\n\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    this._attachedPortal = portal;\n    return componentRef;\n  }\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n\n\n  attachTemplatePortal(portal) {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector\n    }); // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode)); // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n\n    viewRef.detectChanges();\n    this.setDisposeFn(() => {\n      let index = viewContainer.indexOf(viewRef);\n\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n    this._attachedPortal = portal; // TODO(jelbourn): Return locals from view.\n\n    return viewRef;\n  }\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  dispose() {\n    super.dispose();\n    this.outletElement.remove();\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n\n\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nclass DomPortalHost extends DomPortalOutlet {}\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n\n\nclass CdkPortal extends TemplatePortal {\n  constructor() {\n    const templateRef = inject(TemplateRef);\n    const viewContainerRef = inject(ViewContainerRef);\n    super(templateRef, viewContainerRef);\n  }\n\n}\n\n_defineProperty(CdkPortal, \"\\u0275fac\", function CdkPortal_Factory(t) {\n  return new (t || CdkPortal)();\n});\n\n_defineProperty(CdkPortal, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkPortal,\n  selectors: [[\"\", \"cdkPortal\", \"\"]],\n  exportAs: [\"cdkPortal\"],\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature]\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkPortal, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortal]',\n      exportAs: 'cdkPortal'\n    }]\n  }], () => [], null);\n})();\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n\n\nclass TemplatePortalDirective extends CdkPortal {}\n\n_defineProperty(TemplatePortalDirective, \"\\u0275fac\", /* @__PURE__ */function () {\n  let ɵTemplatePortalDirective_BaseFactory;\n  return function TemplatePortalDirective_Factory(t) {\n    return (ɵTemplatePortalDirective_BaseFactory || (ɵTemplatePortalDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TemplatePortalDirective)))(t || TemplatePortalDirective);\n  };\n}());\n\n_defineProperty(TemplatePortalDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TemplatePortalDirective,\n  selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]],\n  exportAs: [\"cdkPortal\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkPortal,\n    useExisting: TemplatePortalDirective\n  }]), i0.ɵɵInheritDefinitionFeature]\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TemplatePortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-portal], [portal]',\n      exportAs: 'cdkPortal',\n      providers: [{\n        provide: CdkPortal,\n        useExisting: TemplatePortalDirective\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n\n\nclass CdkPortalOutlet extends BasePortalOutlet {\n  /** Whether the portal component is initialized. */\n\n  /** Reference to the currently-attached component/view ref. */\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_moduleRef\", inject(NgModuleRef, {\n      optional: true\n    }));\n\n    _defineProperty(this, \"_document\", inject(DOCUMENT));\n\n    _defineProperty(this, \"_viewContainerRef\", inject(ViewContainerRef));\n\n    _defineProperty(this, \"_isInitialized\", false);\n\n    _defineProperty(this, \"_attachedRef\", void 0);\n\n    _defineProperty(this, \"attached\", new EventEmitter());\n\n    _defineProperty(this, \"attachDomPortal\", portal => {\n      const element = portal.element;\n\n      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('DOM portal content must be attached to a parent node.');\n      } // Anchor used to save the element's previous position so\n      // that we can restore it when the portal is detached.\n\n\n      const anchorNode = this._document.createComment('dom-portal');\n\n      portal.setAttachedHost(this);\n      element.parentNode.insertBefore(anchorNode, element);\n\n      this._getRootNode().appendChild(element);\n\n      this._attachedPortal = portal;\n      super.setDisposeFn(() => {\n        if (anchorNode.parentNode) {\n          anchorNode.parentNode.replaceChild(element, anchorNode);\n        }\n      });\n    });\n  }\n  /** Portal associated with the Portal outlet. */\n\n\n  get portal() {\n    return this._attachedPortal;\n  }\n\n  set portal(portal) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal || null;\n  }\n  /** Emits when a portal is attached to the outlet. */\n\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef() {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedRef = this._attachedPortal = null;\n  }\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n\n\n  attachComponentPortal(portal) {\n    portal.setAttachedHost(this); // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n\n    const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n    const ref = viewContainerRef.createComponent(portal.component, {\n      index: viewContainerRef.length,\n      injector: portal.injector || viewContainerRef.injector,\n      projectableNodes: portal.projectableNodes || undefined,\n      ngModuleRef: this._moduleRef || undefined\n    }); // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n    return ref;\n  }\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n\n\n  attachTemplatePortal(portal) {\n    portal.setAttachedHost(this);\n\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector\n    });\n\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n    return viewRef;\n  }\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n\n\n  /** Gets the root node of the portal outlet. */\n  _getRootNode() {\n    const nativeElement = this._viewContainerRef.element.nativeElement; // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n\n    return nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement : nativeElement.parentNode;\n  }\n\n}\n\n_defineProperty(CdkPortalOutlet, \"\\u0275fac\", function CdkPortalOutlet_Factory(t) {\n  return new (t || CdkPortalOutlet)();\n});\n\n_defineProperty(CdkPortalOutlet, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkPortalOutlet,\n  selectors: [[\"\", \"cdkPortalOutlet\", \"\"]],\n  inputs: {\n    portal: [\"cdkPortalOutlet\", \"portal\"]\n  },\n  outputs: {\n    attached: \"attached\"\n  },\n  exportAs: [\"cdkPortalOutlet\"],\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature]\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkPortalOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalOutlet]',\n      exportAs: 'cdkPortalOutlet'\n    }]\n  }], () => [], {\n    portal: [{\n      type: Input,\n      args: ['cdkPortalOutlet']\n    }],\n    attached: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nclass PortalHostDirective extends CdkPortalOutlet {}\n\n_defineProperty(PortalHostDirective, \"\\u0275fac\", /* @__PURE__ */function () {\n  let ɵPortalHostDirective_BaseFactory;\n  return function PortalHostDirective_Factory(t) {\n    return (ɵPortalHostDirective_BaseFactory || (ɵPortalHostDirective_BaseFactory = i0.ɵɵgetInheritedFactory(PortalHostDirective)))(t || PortalHostDirective);\n  };\n}());\n\n_defineProperty(PortalHostDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: PortalHostDirective,\n  selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]],\n  inputs: {\n    portal: [\"cdkPortalHost\", \"portal\"]\n  },\n  exportAs: [\"cdkPortalHost\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkPortalOutlet,\n    useExisting: PortalHostDirective\n  }]), i0.ɵɵInheritDefinitionFeature]\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PortalHostDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalHost], [portalHost]',\n      exportAs: 'cdkPortalHost',\n      inputs: [{\n        name: 'portal',\n        alias: 'cdkPortalHost'\n      }],\n      providers: [{\n        provide: CdkPortalOutlet,\n        useExisting: PortalHostDirective\n      }]\n    }]\n  }], null, null);\n})();\n\nclass PortalModule {}\n\n_defineProperty(PortalModule, \"\\u0275fac\", function PortalModule_Factory(t) {\n  return new (t || PortalModule)();\n});\n\n_defineProperty(PortalModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PortalModule\n}));\n\n_defineProperty(PortalModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PortalModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n      exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\n\n\nclass PortalInjector {\n  constructor(_parentInjector, _customTokens) {\n    _defineProperty(this, \"_parentInjector\", void 0);\n\n    _defineProperty(this, \"_customTokens\", void 0);\n\n    this._parentInjector = _parentInjector;\n    this._customTokens = _customTokens;\n  }\n\n  get(token, notFoundValue) {\n    const value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get(token, notFoundValue);\n  }\n\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };","map":{"version":3,"names":["i0","ElementRef","NgModuleRef","createComponent","Injector","inject","TemplateRef","ViewContainerRef","Directive","EventEmitter","Input","Output","NgModule","DOCUMENT","throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","Portal","attach","host","ngDevMode","hasAttached","_attachedHost","detach","isAttached","setAttachedHost","ComponentPortal","constructor","component","viewContainerRef","injector","_componentFactoryResolver","projectableNodes","TemplatePortal","templateRef","context","origin","elementRef","undefined","DomPortal","element","nativeElement","BasePortalOutlet","_attachedPortal","portal","_isDisposed","attachComponentPortal","attachTemplatePortal","attachDomPortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","BasePortalHost","DomPortalOutlet","outletElement","_unusedComponentFactoryResolver","_appRef","_defaultInjector","_document","parentNode","anchorNode","createComment","insertBefore","appendChild","replaceChild","componentRef","ngModuleRef","get","optional","index","length","destroy","elementInjector","NULL","environmentInjector","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","indexOf","remove","DomPortalHost","CdkPortal","type","args","selector","exportAs","TemplatePortalDirective","provide","useExisting","providers","CdkPortalOutlet","_getRootNode","_isInitialized","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","_viewContainerRef","ref","_moduleRef","attached","emit","clear","nodeType","ELEMENT_NODE","PortalHostDirective","inputs","name","alias","PortalModule","imports","exports","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value"],"sources":["C:/Users/danie/source/repos/ControlOnlineTest/ControlOnlineTest/ClientApp/node_modules/@angular/cdk/fesm2022/portal.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { ElementRef, NgModuleRef, createComponent, Injector, inject, TemplateRef, ViewContainerRef, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    _attachedHost;\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    /** The type of the component that will be instantiated for attachment. */\n    component;\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\n     * The origin is necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef;\n    /** Injector used for the instantiation of the component. */\n    injector;\n    /**\n     * @deprecated No longer in use. To be removed.\n     * @breaking-change 18.0.0\n     */\n    componentFactoryResolver;\n    /**\n     * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\n     */\n    projectableNodes;\n    constructor(component, viewContainerRef, injector, \n    /**\n     * @deprecated No longer in use. To be removed.\n     * @breaking-change 18.0.0\n     */\n    _componentFactoryResolver, projectableNodes) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.projectableNodes = projectableNodes;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    templateRef;\n    viewContainerRef;\n    context;\n    injector;\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    /** DOM node hosting the portal's content. */\n    element;\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    /** The portal currently attached to the host. */\n    _attachedPortal;\n    /** A function that will permanently dispose this host. */\n    _disposeFn;\n    /** Whether this host has already been permanently disposed. */\n    _isDisposed = false;\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n    attachDomPortal = null;\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    outletElement;\n    _appRef;\n    _defaultInjector;\n    _document;\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _unusedComponentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, \n    /**\n     * @deprecated No longer in use. To be removed.\n     * @breaking-change 18.0.0\n     */\n    _unusedComponentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            const injector = portal.injector || portal.viewContainerRef.injector;\n            const ngModuleRef = injector.get(NgModuleRef, null, { optional: true }) || undefined;\n            componentRef = portal.viewContainerRef.createComponent(portal.component, {\n                index: portal.viewContainerRef.length,\n                injector,\n                ngModuleRef,\n                projectableNodes: portal.projectableNodes || undefined,\n            });\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = createComponent(portal.component, {\n                elementInjector: portal.injector || this._defaultInjector || Injector.NULL,\n                environmentInjector: this._appRef.injector,\n                projectableNodes: portal.projectableNodes || undefined,\n            });\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Attaches a DOM portal by transferring its content into the outlet.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = (portal) => {\n        const element = portal.element;\n        if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('DOM portal content must be attached to a parent node.');\n        }\n        // Anchor used to save the element's previous position so\n        // that we can restore it when the portal is detached.\n        const anchorNode = this._document.createComment('dom-portal');\n        element.parentNode.insertBefore(anchorNode, element);\n        this.outletElement.appendChild(element);\n        this._attachedPortal = portal;\n        super.setDisposeFn(() => {\n            // We can't use `replaceWith` here because IE doesn't support it.\n            if (anchorNode.parentNode) {\n                anchorNode.parentNode.replaceChild(element, anchorNode);\n            }\n        });\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor() {\n        const templateRef = inject(TemplateRef);\n        const viewContainerRef = inject(ViewContainerRef);\n        super(templateRef, viewContainerRef);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkPortal, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: CdkPortal, isStandalone: true, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: TemplatePortalDirective, isStandalone: true, selector: \"[cdk-portal], [portal]\", providers: [\n            {\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective,\n            },\n        ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    _moduleRef = inject(NgModuleRef, { optional: true });\n    _document = inject(DOCUMENT);\n    _viewContainerRef = inject(ViewContainerRef);\n    /** Whether the portal component is initialized. */\n    _isInitialized = false;\n    /** Reference to the currently-attached component/view ref. */\n    _attachedRef;\n    constructor() {\n        super();\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Emits when a portal is attached to the outlet. */\n    attached = new EventEmitter();\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedRef = this._attachedPortal = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const ref = viewContainerRef.createComponent(portal.component, {\n            index: viewContainerRef.length,\n            injector: portal.injector || viewContainerRef.injector,\n            projectableNodes: portal.projectableNodes || undefined,\n            ngModuleRef: this._moduleRef || undefined,\n        });\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /**\n     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = (portal) => {\n        const element = portal.element;\n        if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('DOM portal content must be attached to a parent node.');\n        }\n        // Anchor used to save the element's previous position so\n        // that we can restore it when the portal is detached.\n        const anchorNode = this._document.createComment('dom-portal');\n        portal.setAttachedHost(this);\n        element.parentNode.insertBefore(anchorNode, element);\n        this._getRootNode().appendChild(element);\n        this._attachedPortal = portal;\n        super.setDisposeFn(() => {\n            if (anchorNode.parentNode) {\n                anchorNode.parentNode.replaceChild(element, anchorNode);\n            }\n        });\n    };\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkPortalOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: CdkPortalOutlet, isStandalone: true, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                }]\n        }], ctorParameters: () => [], propDecorators: { portal: [{\n                type: Input,\n                args: ['cdkPortalOutlet']\n            }], attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: PortalHostDirective, isStandalone: true, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n            {\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective,\n            },\n        ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: [{ name: 'portal', alias: 'cdkPortalHost' }],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.1.3\", ngImport: i0, type: PortalModule, imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: PortalModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    _parentInjector;\n    _customTokens;\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,eAAlC,EAAmDC,QAAnD,EAA6DC,MAA7D,EAAqEC,WAArE,EAAkFC,gBAAlF,EAAoGC,SAApG,EAA+GC,YAA/G,EAA6HC,KAA7H,EAAoIC,MAApI,EAA4IC,QAA5I,QAA4J,eAA5J;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,GAAgC;EAC5B,MAAMC,KAAK,CAAC,iCAAD,CAAX;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,+BAAT,GAA2C;EACvC,MAAMD,KAAK,CAAC,oCAAD,CAAX;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASE,qCAAT,GAAiD;EAC7C,MAAMF,KAAK,CAAC,6CAAD,CAAX;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASG,2BAAT,GAAuC;EACnC,MAAMH,KAAK,CAAC,kFACR,wCADO,CAAX;AAEH;AACD;AACA;AACA;AACA;;;AACA,SAASI,0BAAT,GAAsC;EAClC,MAAMJ,KAAK,CAAC,sDAAD,CAAX;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASK,0BAAT,GAAsC;EAClC,MAAML,KAAK,CAAC,8DAAD,CAAX;AACH;AAED;AACA;AACA;AACA;;;AACA,MAAMM,MAAN,CAAa;EAAA;IAAA;EAAA;;EAET;EACAC,MAAM,CAACC,IAAD,EAAO;IACT,IAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;MAC/C,IAAID,IAAI,IAAI,IAAZ,EAAkB;QACdJ,0BAA0B;MAC7B;;MACD,IAAII,IAAI,CAACE,WAAL,EAAJ,EAAwB;QACpBT,+BAA+B;MAClC;IACJ;;IACD,KAAKU,aAAL,GAAqBH,IAArB;IACA,OAAOA,IAAI,CAACD,MAAL,CAAY,IAAZ,CAAP;EACH;EACD;;;EACAK,MAAM,GAAG;IACL,IAAIJ,IAAI,GAAG,KAAKG,aAAhB;;IACA,IAAIH,IAAI,IAAI,IAAZ,EAAkB;MACd,KAAKG,aAAL,GAAqB,IAArB;MACAH,IAAI,CAACI,MAAL;IACH,CAHD,MAIK,IAAI,OAAOH,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;MACpDJ,0BAA0B;IAC7B;EACJ;EACD;;;EACc,IAAVQ,UAAU,GAAG;IACb,OAAO,KAAKF,aAAL,IAAsB,IAA7B;EACH;EACD;AACJ;AACA;AACA;;;EACIG,eAAe,CAACN,IAAD,EAAO;IAClB,KAAKG,aAAL,GAAqBH,IAArB;EACH;;AApCQ;AAsCb;AACA;AACA;;;AACA,MAAMO,eAAN,SAA8BT,MAA9B,CAAqC;EACjC;;EAEA;AACJ;AACA;AACA;AACA;;EAEI;;EAEA;AACJ;AACA;AACA;;EAEI;AACJ;AACA;EAEIU,WAAW,CAACC,SAAD,EAAYC,gBAAZ,EAA8BC,QAA9B;EACX;AACJ;AACA;AACA;EACIC,yBALW,EAKgBC,gBALhB,EAKkC;IACzC;;IADyC;;IAAA;;IAAA;;IAAA;;IAAA;;IAEzC,KAAKJ,SAAL,GAAiBA,SAAjB;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKE,gBAAL,GAAwBA,gBAAxB;EACH;;AA/BgC;AAiCrC;AACA;AACA;;;AACA,MAAMC,cAAN,SAA6BhB,MAA7B,CAAoC;EAKhCU,WAAW;EACX;EACAO,WAFW;EAGX;EACAL,gBAJW;EAKX;EACAM,OANW;EAOX;EACAL,QARW,EAQD;IACN;;IADM;;IAAA;;IAAA;;IAAA;;IAEN,KAAKI,WAAL,GAAmBA,WAAnB;IACA,KAAKL,gBAAL,GAAwBA,gBAAxB;IACA,KAAKM,OAAL,GAAeA,OAAf;IACA,KAAKL,QAAL,GAAgBA,QAAhB;EACH;;EACS,IAANM,MAAM,GAAG;IACT,OAAO,KAAKF,WAAL,CAAiBG,UAAxB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACInB,MAAM,CAACC,IAAD,EAAOgB,OAAO,GAAG,KAAKA,OAAtB,EAA+B;IACjC,KAAKA,OAAL,GAAeA,OAAf;IACA,OAAO,MAAMjB,MAAN,CAAaC,IAAb,CAAP;EACH;;EACDI,MAAM,GAAG;IACL,KAAKY,OAAL,GAAeG,SAAf;IACA,OAAO,MAAMf,MAAN,EAAP;EACH;;AAnC+B;AAqCpC;AACA;AACA;AACA;AACA;;;AACA,MAAMgB,SAAN,SAAwBtB,MAAxB,CAA+B;EAC3B;EAEAU,WAAW,CAACa,OAAD,EAAU;IACjB;;IADiB;;IAEjB,KAAKA,OAAL,GAAeA,OAAO,YAAY3C,UAAnB,GAAgC2C,OAAO,CAACC,aAAxC,GAAwDD,OAAvE;EACH;;AAN0B;AAQ/B;AACA;AACA;AACA;;;AACA,MAAME,gBAAN,CAAuB;EAAA;IAAA;;IAAA;;IAAA,qCAML,KANK;;IAAA,yCA0CD,IA1CC;EAAA;;EAOnB;EACArB,WAAW,GAAG;IACV,OAAO,CAAC,CAAC,KAAKsB,eAAd;EACH;EACD;;;EACAzB,MAAM,CAAC0B,MAAD,EAAS;IACX,IAAI,OAAOxB,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;MAC/C,IAAI,CAACwB,MAAL,EAAa;QACTlC,oBAAoB;MACvB;;MACD,IAAI,KAAKW,WAAL,EAAJ,EAAwB;QACpBT,+BAA+B;MAClC;;MACD,IAAI,KAAKiC,WAAT,EAAsB;QAClBhC,qCAAqC;MACxC;IACJ;;IACD,IAAI+B,MAAM,YAAYlB,eAAtB,EAAuC;MACnC,KAAKiB,eAAL,GAAuBC,MAAvB;MACA,OAAO,KAAKE,qBAAL,CAA2BF,MAA3B,CAAP;IACH,CAHD,MAIK,IAAIA,MAAM,YAAYX,cAAtB,EAAsC;MACvC,KAAKU,eAAL,GAAuBC,MAAvB;MACA,OAAO,KAAKG,oBAAL,CAA0BH,MAA1B,CAAP,CAFuC,CAGvC;IACH,CAJI,MAKA,IAAI,KAAKI,eAAL,IAAwBJ,MAAM,YAAYL,SAA9C,EAAyD;MAC1D,KAAKI,eAAL,GAAuBC,MAAvB;MACA,OAAO,KAAKI,eAAL,CAAqBJ,MAArB,CAAP;IACH;;IACD,IAAI,OAAOxB,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;MAC/CN,2BAA2B;IAC9B;EACJ,CAxCkB,CAyCnB;;;EAEA;EACAS,MAAM,GAAG;IACL,IAAI,KAAKoB,eAAT,EAA0B;MACtB,KAAKA,eAAL,CAAqBlB,eAArB,CAAqC,IAArC;;MACA,KAAKkB,eAAL,GAAuB,IAAvB;IACH;;IACD,KAAKM,gBAAL;EACH;EACD;;;EACAC,OAAO,GAAG;IACN,IAAI,KAAK7B,WAAL,EAAJ,EAAwB;MACpB,KAAKE,MAAL;IACH;;IACD,KAAK0B,gBAAL;;IACA,KAAKJ,WAAL,GAAmB,IAAnB;EACH;EACD;;;EACAM,YAAY,CAACC,EAAD,EAAK;IACb,KAAKC,UAAL,GAAkBD,EAAlB;EACH;;EACDH,gBAAgB,GAAG;IACf,IAAI,KAAKI,UAAT,EAAqB;MACjB,KAAKA,UAAL;;MACA,KAAKA,UAAL,GAAkB,IAAlB;IACH;EACJ;;AApEkB;AAsEvB;AACA;AACA;AACA;;;AACA,MAAMC,cAAN,SAA6BZ,gBAA7B,CAA8C;AAG9C;AACA;AACA;AACA;;;AACA,MAAMa,eAAN,SAA8Bb,gBAA9B,CAA+C;EAK3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIf,WAAW;EACX;EACA6B,aAFW;EAGX;AACJ;AACA;AACA;EACIC,+BAPW,EAOsBC,OAPtB,EAO+BC,gBAP/B;EAQX;AACJ;AACA;AACA;EACIC,SAZW,EAYA;IACP;;IADO;;IAAA;;IAAA;;IAAA;;IAAA,yCAyFQhB,MAAD,IAAY;MAC1B,MAAMJ,OAAO,GAAGI,MAAM,CAACJ,OAAvB;;MACA,IAAI,CAACA,OAAO,CAACqB,UAAT,KAAwB,OAAOzC,SAAP,KAAqB,WAArB,IAAoCA,SAA5D,CAAJ,EAA4E;QACxE,MAAMT,KAAK,CAAC,uDAAD,CAAX;MACH,CAJyB,CAK1B;MACA;;;MACA,MAAMmD,UAAU,GAAG,KAAKF,SAAL,CAAeG,aAAf,CAA6B,YAA7B,CAAnB;;MACAvB,OAAO,CAACqB,UAAR,CAAmBG,YAAnB,CAAgCF,UAAhC,EAA4CtB,OAA5C;MACA,KAAKgB,aAAL,CAAmBS,WAAnB,CAA+BzB,OAA/B;MACA,KAAKG,eAAL,GAAuBC,MAAvB;MACA,MAAMO,YAAN,CAAmB,MAAM;QACrB;QACA,IAAIW,UAAU,CAACD,UAAf,EAA2B;UACvBC,UAAU,CAACD,UAAX,CAAsBK,YAAtB,CAAmC1B,OAAnC,EAA4CsB,UAA5C;QACH;MACJ,CALD;IAMH,CA1GU;;IAEP,KAAKN,aAAL,GAAqBA,aAArB;IACA,KAAKE,OAAL,GAAeA,OAAf;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACId,qBAAqB,CAACF,MAAD,EAAS;IAC1B,IAAIuB,YAAJ,CAD0B,CAE1B;IACA;IACA;IACA;;IACA,IAAIvB,MAAM,CAACf,gBAAX,EAA6B;MACzB,MAAMC,QAAQ,GAAGc,MAAM,CAACd,QAAP,IAAmBc,MAAM,CAACf,gBAAP,CAAwBC,QAA5D;MACA,MAAMsC,WAAW,GAAGtC,QAAQ,CAACuC,GAAT,CAAavE,WAAb,EAA0B,IAA1B,EAAgC;QAAEwE,QAAQ,EAAE;MAAZ,CAAhC,KAAuDhC,SAA3E;MACA6B,YAAY,GAAGvB,MAAM,CAACf,gBAAP,CAAwB9B,eAAxB,CAAwC6C,MAAM,CAAChB,SAA/C,EAA0D;QACrE2C,KAAK,EAAE3B,MAAM,CAACf,gBAAP,CAAwB2C,MADsC;QAErE1C,QAFqE;QAGrEsC,WAHqE;QAIrEpC,gBAAgB,EAAEY,MAAM,CAACZ,gBAAP,IAA2BM;MAJwB,CAA1D,CAAf;MAMA,KAAKa,YAAL,CAAkB,MAAMgB,YAAY,CAACM,OAAb,EAAxB;IACH,CAVD,MAWK;MACD,IAAI,CAAC,OAAOrD,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,CAAC,KAAKsC,OAA7D,EAAsE;QAClE,MAAM/C,KAAK,CAAC,qEAAD,CAAX;MACH;;MACDwD,YAAY,GAAGpE,eAAe,CAAC6C,MAAM,CAAChB,SAAR,EAAmB;QAC7C8C,eAAe,EAAE9B,MAAM,CAACd,QAAP,IAAmB,KAAK6B,gBAAxB,IAA4C3D,QAAQ,CAAC2E,IADzB;QAE7CC,mBAAmB,EAAE,KAAKlB,OAAL,CAAa5B,QAFW;QAG7CE,gBAAgB,EAAEY,MAAM,CAACZ,gBAAP,IAA2BM;MAHA,CAAnB,CAA9B;;MAKA,KAAKoB,OAAL,CAAamB,UAAb,CAAwBV,YAAY,CAACW,QAArC;;MACA,KAAK3B,YAAL,CAAkB,MAAM;QACpB;QACA;QACA,IAAI,KAAKO,OAAL,CAAaqB,SAAb,GAAyB,CAA7B,EAAgC;UAC5B,KAAKrB,OAAL,CAAasB,UAAb,CAAwBb,YAAY,CAACW,QAArC;QACH;;QACDX,YAAY,CAACM,OAAb;MACH,CAPD;IAQH,CAnCyB,CAoC1B;IACA;;;IACA,KAAKjB,aAAL,CAAmBS,WAAnB,CAA+B,KAAKgB,qBAAL,CAA2Bd,YAA3B,CAA/B;IACA,KAAKxB,eAAL,GAAuBC,MAAvB;IACA,OAAOuB,YAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIpB,oBAAoB,CAACH,MAAD,EAAS;IACzB,IAAIsC,aAAa,GAAGtC,MAAM,CAACf,gBAA3B;IACA,IAAIsD,OAAO,GAAGD,aAAa,CAACE,kBAAd,CAAiCxC,MAAM,CAACV,WAAxC,EAAqDU,MAAM,CAACT,OAA5D,EAAqE;MAC/EL,QAAQ,EAAEc,MAAM,CAACd;IAD8D,CAArE,CAAd,CAFyB,CAKzB;IACA;IACA;IACA;;IACAqD,OAAO,CAACE,SAAR,CAAkBC,OAAlB,CAA0BC,QAAQ,IAAI,KAAK/B,aAAL,CAAmBS,WAAnB,CAA+BsB,QAA/B,CAAtC,EATyB,CAUzB;IACA;IACA;;IACAJ,OAAO,CAACK,aAAR;IACA,KAAKrC,YAAL,CAAkB,MAAM;MACpB,IAAIoB,KAAK,GAAGW,aAAa,CAACO,OAAd,CAAsBN,OAAtB,CAAZ;;MACA,IAAIZ,KAAK,KAAK,CAAC,CAAf,EAAkB;QACdW,aAAa,CAACQ,MAAd,CAAqBnB,KAArB;MACH;IACJ,CALD;IAMA,KAAK5B,eAAL,GAAuBC,MAAvB,CApByB,CAqBzB;;IACA,OAAOuC,OAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EAmBI;AACJ;AACA;EACIjC,OAAO,GAAG;IACN,MAAMA,OAAN;IACA,KAAKM,aAAL,CAAmBkC,MAAnB;EACH;EACD;;;EACAT,qBAAqB,CAACd,YAAD,EAAe;IAChC,OAAOA,YAAY,CAACW,QAAb,CAAsBO,SAAtB,CAAgC,CAAhC,CAAP;EACH;;AAjJ0C;AAmJ/C;AACA;AACA;AACA;;;AACA,MAAMM,aAAN,SAA4BpC,eAA5B,CAA4C;AAG5C;AACA;AACA;AACA;;;AACA,MAAMqC,SAAN,SAAwB3D,cAAxB,CAAuC;EACnCN,WAAW,GAAG;IACV,MAAMO,WAAW,GAAGjC,MAAM,CAACC,WAAD,CAA1B;IACA,MAAM2B,gBAAgB,GAAG5B,MAAM,CAACE,gBAAD,CAA/B;IACA,MAAM+B,WAAN,EAAmBL,gBAAnB;EACH;;AALkC;;gBAAjC+D,S;mBAMiGA,S;;;gBANjGA,S,8BAS2EhG,E;QAFUgG,S;;;;aAEVhG,E;;;AAAjF;EAAA,mDAAiFA,EAAjF,mBAA2FgG,SAA3F,EAAkH,CAAC;IACvGC,IAAI,EAAEzF,SADiG;IAEvG0F,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,aADX;MAECC,QAAQ,EAAE;IAFX,CAAD;EAFiG,CAAD,CAAlH,EAM4B,MAAM,EANlC;AAAA;AAOA;AACA;AACA;AACA;;;AACA,MAAMC,uBAAN,SAAsCL,SAAtC,CAAgD;;gBAA1CK,uB;;;4FAX2ErG,E,uBAYsBqG,uB,SAAAA,uB;;;;gBADjGA,uB,8BAX2ErG,E;QAaUqG,uB;;;;aAbVrG,E,oBAasG,CAC3K;IACIsG,OAAO,EAAEN,SADb;IAEIO,WAAW,EAAEF;EAFjB,CAD2K,C,GAbtGrG,E;;;AAoBjF;EAAA,mDApBiFA,EAoBjF,mBAA2FqG,uBAA3F,EAAgI,CAAC;IACrHJ,IAAI,EAAEzF,SAD+G;IAErH0F,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,wBADX;MAECC,QAAQ,EAAE,WAFX;MAGCI,SAAS,EAAE,CACP;QACIF,OAAO,EAAEN,SADb;QAEIO,WAAW,EAAEF;MAFjB,CADO;IAHZ,CAAD;EAF+G,CAAD,CAAhI;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,eAAN,SAA8B3D,gBAA9B,CAA+C;EAI3C;;EAEA;EAEAf,WAAW,GAAG;IACV;;IADU,oCAPD1B,MAAM,CAACH,WAAD,EAAc;MAAEwE,QAAQ,EAAE;IAAZ,CAAd,CAOL;;IAAA,mCANFrE,MAAM,CAACQ,QAAD,CAMJ;;IAAA,2CALMR,MAAM,CAACE,gBAAD,CAKZ;;IAAA,wCAHG,KAGH;;IAAA;;IAAA,kCAwBH,IAAIE,YAAJ,EAxBG;;IAAA,yCAuFKuC,MAAD,IAAY;MAC1B,MAAMJ,OAAO,GAAGI,MAAM,CAACJ,OAAvB;;MACA,IAAI,CAACA,OAAO,CAACqB,UAAT,KAAwB,OAAOzC,SAAP,KAAqB,WAArB,IAAoCA,SAA5D,CAAJ,EAA4E;QACxE,MAAMT,KAAK,CAAC,uDAAD,CAAX;MACH,CAJyB,CAK1B;MACA;;;MACA,MAAMmD,UAAU,GAAG,KAAKF,SAAL,CAAeG,aAAf,CAA6B,YAA7B,CAAnB;;MACAnB,MAAM,CAACnB,eAAP,CAAuB,IAAvB;MACAe,OAAO,CAACqB,UAAR,CAAmBG,YAAnB,CAAgCF,UAAhC,EAA4CtB,OAA5C;;MACA,KAAK8D,YAAL,GAAoBrC,WAApB,CAAgCzB,OAAhC;;MACA,KAAKG,eAAL,GAAuBC,MAAvB;MACA,MAAMO,YAAN,CAAmB,MAAM;QACrB,IAAIW,UAAU,CAACD,UAAf,EAA2B;UACvBC,UAAU,CAACD,UAAX,CAAsBK,YAAtB,CAAmC1B,OAAnC,EAA4CsB,UAA5C;QACH;MACJ,CAJD;IAKH,CAxGa;EAEb;EACD;;;EACU,IAANlB,MAAM,GAAG;IACT,OAAO,KAAKD,eAAZ;EACH;;EACS,IAANC,MAAM,CAACA,MAAD,EAAS;IACf;IACA;IACA;IACA;IACA,IAAI,KAAKvB,WAAL,MAAsB,CAACuB,MAAvB,IAAiC,CAAC,KAAK2D,cAA3C,EAA2D;MACvD;IACH;;IACD,IAAI,KAAKlF,WAAL,EAAJ,EAAwB;MACpB,MAAME,MAAN;IACH;;IACD,IAAIqB,MAAJ,EAAY;MACR,MAAM1B,MAAN,CAAa0B,MAAb;IACH;;IACD,KAAKD,eAAL,GAAuBC,MAAM,IAAI,IAAjC;EACH;EACD;;;EAEA;EACe,IAAX4D,WAAW,GAAG;IACd,OAAO,KAAKC,YAAZ;EACH;;EACDC,QAAQ,GAAG;IACP,KAAKH,cAAL,GAAsB,IAAtB;EACH;;EACDI,WAAW,GAAG;IACV,MAAMzD,OAAN;IACA,KAAKuD,YAAL,GAAoB,KAAK9D,eAAL,GAAuB,IAA3C;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIG,qBAAqB,CAACF,MAAD,EAAS;IAC1BA,MAAM,CAACnB,eAAP,CAAuB,IAAvB,EAD0B,CAE1B;IACA;;IACA,MAAMI,gBAAgB,GAAGe,MAAM,CAACf,gBAAP,IAA2B,IAA3B,GAAkCe,MAAM,CAACf,gBAAzC,GAA4D,KAAK+E,iBAA1F;IACA,MAAMC,GAAG,GAAGhF,gBAAgB,CAAC9B,eAAjB,CAAiC6C,MAAM,CAAChB,SAAxC,EAAmD;MAC3D2C,KAAK,EAAE1C,gBAAgB,CAAC2C,MADmC;MAE3D1C,QAAQ,EAAEc,MAAM,CAACd,QAAP,IAAmBD,gBAAgB,CAACC,QAFa;MAG3DE,gBAAgB,EAAEY,MAAM,CAACZ,gBAAP,IAA2BM,SAHc;MAI3D8B,WAAW,EAAE,KAAK0C,UAAL,IAAmBxE;IAJ2B,CAAnD,CAAZ,CAL0B,CAW1B;IACA;IACA;;IACA,IAAIT,gBAAgB,KAAK,KAAK+E,iBAA9B,EAAiD;MAC7C,KAAKN,YAAL,GAAoBrC,WAApB,CAAgC4C,GAAG,CAAC/B,QAAJ,CAAaO,SAAb,CAAuB,CAAvB,CAAhC;IACH;;IACD,MAAMlC,YAAN,CAAmB,MAAM0D,GAAG,CAACpC,OAAJ,EAAzB;IACA,KAAK9B,eAAL,GAAuBC,MAAvB;IACA,KAAK6D,YAAL,GAAoBI,GAApB;IACA,KAAKE,QAAL,CAAcC,IAAd,CAAmBH,GAAnB;IACA,OAAOA,GAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI9D,oBAAoB,CAACH,MAAD,EAAS;IACzBA,MAAM,CAACnB,eAAP,CAAuB,IAAvB;;IACA,MAAM0D,OAAO,GAAG,KAAKyB,iBAAL,CAAuBxB,kBAAvB,CAA0CxC,MAAM,CAACV,WAAjD,EAA8DU,MAAM,CAACT,OAArE,EAA8E;MAC1FL,QAAQ,EAAEc,MAAM,CAACd;IADyE,CAA9E,CAAhB;;IAGA,MAAMqB,YAAN,CAAmB,MAAM,KAAKyD,iBAAL,CAAuBK,KAAvB,EAAzB;IACA,KAAKtE,eAAL,GAAuBC,MAAvB;IACA,KAAK6D,YAAL,GAAoBtB,OAApB;IACA,KAAK4B,QAAL,CAAcC,IAAd,CAAmB7B,OAAnB;IACA,OAAOA,OAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EAmBI;EACAmB,YAAY,GAAG;IACX,MAAM7D,aAAa,GAAG,KAAKmE,iBAAL,CAAuBpE,OAAvB,CAA+BC,aAArD,CADW,CAEX;IACA;;IACA,OAAQA,aAAa,CAACyE,QAAd,KAA2BzE,aAAa,CAAC0E,YAAzC,GACF1E,aADE,GAEFA,aAAa,CAACoB,UAFpB;EAGH;;AAzH0C;;gBAAzCwC,e;mBA0HiGA,e;;;gBA1HjGA,e,8BAxC2EzG,E;QAmKUyG,e;;;;;;;;;;aAnKVzG,E;;;AAqKjF;EAAA,mDArKiFA,EAqKjF,mBAA2FyG,eAA3F,EAAwH,CAAC;IAC7GR,IAAI,EAAEzF,SADuG;IAE7G0F,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,mBADX;MAECC,QAAQ,EAAE;IAFX,CAAD;EAFuG,CAAD,CAAxH,EAM4B,MAAM,EANlC,EAMsD;IAAEpD,MAAM,EAAE,CAAC;MACjDiD,IAAI,EAAEvF,KAD2C;MAEjDwF,IAAI,EAAE,CAAC,iBAAD;IAF2C,CAAD,CAAV;IAGtCiB,QAAQ,EAAE,CAAC;MACXlB,IAAI,EAAEtF;IADK,CAAD;EAH4B,CANtD;AAAA;AAYA;AACA;AACA;AACA;;;AACA,MAAM6G,mBAAN,SAAkCf,eAAlC,CAAkD;;gBAA5Ce,mB;;;oFArL2ExH,E,uBAsLsBwH,mB,SAAAA,mB;;;;gBADjGA,mB,8BArL2ExH,E;QAuLUwH,mB;;;;;;;aAvLVxH,E,oBAuL0J,CAC/N;IACIsG,OAAO,EAAEG,eADb;IAEIF,WAAW,EAAEiB;EAFjB,CAD+N,C,GAvL1JxH,E;;;AA8LjF;EAAA,mDA9LiFA,EA8LjF,mBAA2FwH,mBAA3F,EAA4H,CAAC;IACjHvB,IAAI,EAAEzF,SAD2G;IAEjH0F,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,+BADX;MAECC,QAAQ,EAAE,eAFX;MAGCqB,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE,QAAR;QAAkBC,KAAK,EAAE;MAAzB,CAAD,CAHT;MAICnB,SAAS,EAAE,CACP;QACIF,OAAO,EAAEG,eADb;QAEIF,WAAW,EAAEiB;MAFjB,CADO;IAJZ,CAAD;EAF2G,CAAD,CAA5H;AAAA;;AAcA,MAAMI,YAAN,CAAmB;;gBAAbA,Y;mBACiGA,Y;;;gBADjGA,Y,8BA5M2E5H,E;QA8MuB4H;;;gBAFlGA,Y,8BA5M2E5H,E;;AAiNjF;EAAA,mDAjNiFA,EAiNjF,mBAA2F4H,YAA3F,EAAqH,CAAC;IAC1G3B,IAAI,EAAErF,QADoG;IAE1GsF,IAAI,EAAE,CAAC;MACC2B,OAAO,EAAE,CAAC7B,SAAD,EAAYS,eAAZ,EAA6BJ,uBAA7B,EAAsDmB,mBAAtD,CADV;MAECM,OAAO,EAAE,CAAC9B,SAAD,EAAYS,eAAZ,EAA6BJ,uBAA7B,EAAsDmB,mBAAtD;IAFV,CAAD;EAFoG,CAAD,CAArH;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,cAAN,CAAqB;EAGjBhG,WAAW,CAACiG,eAAD,EAAkBC,aAAlB,EAAiC;IAAA;;IAAA;;IACxC,KAAKD,eAAL,GAAuBA,eAAvB;IACA,KAAKC,aAAL,GAAqBA,aAArB;EACH;;EACDxD,GAAG,CAACyD,KAAD,EAAQC,aAAR,EAAuB;IACtB,MAAMC,KAAK,GAAG,KAAKH,aAAL,CAAmBxD,GAAnB,CAAuByD,KAAvB,CAAd;;IACA,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;MAC9B,OAAOA,KAAP;IACH;;IACD,OAAO,KAAKJ,eAAL,CAAqBvD,GAArB,CAAyByD,KAAzB,EAAgCC,aAAhC,CAAP;EACH;;AAbgB;AAgBrB;AACA;AACA;;;AAEA,SAASzE,cAAT,EAAyBZ,gBAAzB,EAA2CkD,SAA3C,EAAsDS,eAAtD,EAAuE3E,eAAvE,EAAwFa,SAAxF,EAAmGoD,aAAnG,EAAkHpC,eAAlH,EAAmItC,MAAnI,EAA2ImG,mBAA3I,EAAgKO,cAAhK,EAAgLH,YAAhL,EAA8LvF,cAA9L,EAA8MgE,uBAA9M"},"metadata":{},"sourceType":"module"}